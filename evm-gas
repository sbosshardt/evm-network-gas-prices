#!/usr/bin/env python3

import argparse
import json
from evm_utils import (
    get_gas_prices, get_crypto_prices, calculate_gas_costs
)
from networks import RPC_ENDPOINTS, format_network_help
from currencies import (
    SUPPORTED_CURRENCIES, format_currency_help,
    get_currency_symbol, get_currency_name,
    normalize_currency, format_number,
    get_locale_currency, get_all_currencies
)

def print_gas_prices(gas_units: float = 1.0, json_output: bool = False):
    """Print gas prices for all networks."""
    results = get_gas_prices(gas_units)
    
    if json_output:
        print(json.dumps(results, indent=2))
        return
        
    print(f"\nGas Prices (for {format_number(gas_units)}M gas units):")
    print("-" * 80)
    for network, data in results.items():
        if "error" in data:
            print(f"{network}: Error - {data['error']}")
            continue
            
        print(f"{network}:")
        print(f"  Gas Price: {format_number(data['gas_price_gwei'], 5)} gwei")
        print(f"  Total Cost: {format_number(data['native_token_cost'], 8)} {data['native_token_symbol']}")
        print(f"  Native Token: {data['native_token']} ({data['native_token_symbol']})")
        print(f"  Block Number: {format_number(data['block_number'])}")
        print(f"  RPC URL: {data['rpc_url']}")
        print(f"  Timestamp: {data['timestamp']}")
        print(f"  As of: {data['datetime']}")
        print()

def print_crypto_prices(currencies: list, json_output: bool = False):
    """Print cryptocurrency prices."""
    results = get_crypto_prices(currencies)
    
    if json_output:
        print(json.dumps(results, indent=2))
        return
        
    print("\nCryptocurrency Prices:")
    print("-" * 80)
    if "error" in results:
        print(f"Error: {results['error']}")
        return
        
    for token, prices in results.items():
        if token in ["timestamp", "datetime"]:
            continue
        print(f"{token.upper()}:")
        for currency in currencies:
            symbol = get_currency_symbol(currency)
            name = get_currency_name(currency)
            print(f"  {name}: {symbol}{format_number(prices[currency], 5)}")
    print(f"\nTimestamp: {results['timestamp']}")
    print(f"As of: {results['datetime']}")

def print_gas_costs(gas_units: float = 1.0, currencies: list = None, json_output: bool = False):
    """Print gas costs in specified currencies for all networks."""
    if currencies is None:
        currencies = [get_locale_currency()]
    elif "all" in currencies:
        currencies = get_all_currencies()
        
    results = calculate_gas_costs(gas_units, currencies)
    
    if json_output:
        # Transform the results for JSON output
        json_results = {}
        for network, data in results.items():
            if "error" in data:
                json_results[network] = {"error": data["error"]}
                continue
                
            json_results[network] = {
                "gas_price_gwei": data["gas_price_gwei"],
                "native_token_cost": data["native_token_cost"],
                "native_token": data["native_token"],
                "native_token_symbol": data["native_token_symbol"],
                "gas_units": data["gas_units"],
                "block_number": data["block_number"],
                "timestamp": data["timestamp"],
                "datetime": data["datetime"],
                "rpc_url": data["rpc_url"],
                "costs": data["costs"],
                "token_prices": data["token_prices"]
            }
        print(json.dumps(json_results, indent=2))
        return
        
    print(f"\nGas Costs (for {format_number(gas_units)}M gas units):")
    print("-" * 80)
    for network, data in results.items():
        if "error" in data:
            print(f"{network}: Error - {data['error']}")
            continue
            
        print(f"{network}:")
        print(f"  Gas Price: {format_number(data['gas_price_gwei'], 5)} gwei")
        print(f"  Native Token: {data['native_token']} ({data['native_token_symbol']})")
        print(f"  Native Token Cost: {format_number(data['native_token_cost'], 8)} {data['native_token_symbol']}")
        
        # Print costs in each currency
        for currency in currencies:
            normalized = normalize_currency(currency)
            if normalized == "all":
                continue
            symbol = get_currency_symbol(currency)
            name = get_currency_name(currency)
            cost = data["costs"][normalized]
            price = data["token_prices"][normalized]
            print(f"  {name} Cost: {symbol}{format_number(cost)}")
            print(f"  Token Price ({name}): {symbol}{format_number(price)}")
            
        print(f"  Block Number: {format_number(data['block_number'])}")
        print(f"  RPC URL: {data['rpc_url']}")
        print(f"  Timestamp: {data['timestamp']}")
        print(f"  As of: {data['datetime']}")
        print()

def main():
    parser = argparse.ArgumentParser(
        description="EVM Network Gas Price Monitor",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=f"""
Supported Networks:
{format_network_help()}

Supported Currencies:
{format_currency_help()}

By default, shows gas costs in your locale's currency (or all currencies if not supported).
Use optional flags to show specific information types. If multiple flags are provided,
shows default output.
"""
    )
    
    parser.add_argument("--gas-prices", action="store_true",
                       help="Show gas prices for all networks")
    parser.add_argument("--currency-prices", action="store_true",
                       help="Show cryptocurrency prices")
    parser.add_argument("--units", type=float, default=1.0,
                       help="Number of million gas units to calculate for (default: 1.0)")
    parser.add_argument("--currencies", nargs="+", default=[get_locale_currency()],
                       help="Currencies to show prices in (default: locale currency or 'all')")
    parser.add_argument("--json", action="store_true",
                       help="Output in JSON format")
    
    args = parser.parse_args()
    
    # Validate currencies
    if "all" not in args.currencies:
        # Normalize currencies for validation
        normalized_currencies = [normalize_currency(c) for c in args.currencies]
        invalid_currencies = [c for c in normalized_currencies if c not in SUPPORTED_CURRENCIES]
        if invalid_currencies:
            print(f"Error: Unsupported currencies: {', '.join(invalid_currencies)}")
            print(f"Supported currencies: {', '.join(SUPPORTED_CURRENCIES.keys())}")
            return
    
    # If no specific output type is requested, or if multiple are requested,
    # show the default combined output
    if not (args.gas_prices or args.currency_prices) or (args.gas_prices and args.currency_prices):
        print_gas_costs(args.units, args.currencies, args.json)
    else:
        if args.gas_prices:
            print_gas_prices(args.units, args.json)
        if args.currency_prices:
            print_crypto_prices(args.currencies, args.json)

if __name__ == "__main__":
    main() 