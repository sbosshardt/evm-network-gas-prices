#!/usr/bin/env python3

import argparse
import json
from datetime import datetime
from evm_utils import get_gas_prices, get_crypto_prices, calculate_gas_costs_usd

def print_gas_prices(json_output=False, gas_units=1.0):
    """Print gas prices for all networks."""
    results = get_gas_prices(gas_units)
    
    if json_output:
        print(json.dumps(results, indent=2))
        return
        
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"\nGas Prices ({timestamp}):")
    print(f"For {gas_units}M gas units")
    print("-" * 40)
    
    for network, data in results.items():
        if "error" in data:
            print(f"{network}: Error - {data['error']}")
            continue
            
        print(f"\n{network}:")
        print(f"  Gas Price: {data['gas_price_gwei']:.2f} gwei")
        print(f"  Total Cost: {data['total_cost_wei']} wei ({data['native_token_cost']:.8f} native token)")

def print_crypto_prices(json_output=False):
    """Print cryptocurrency prices."""
    results = get_crypto_prices()
    
    if json_output:
        print(json.dumps(results, indent=2))
        return
        
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"\nCryptocurrency Prices ({timestamp}):")
    print("-" * 40)
    
    if "error" in results:
        print(f"Error: {results['error']}")
        return
        
    print("\nUSD Prices:")
    print("-" * 40)
    for token, prices in results.items():
        if token == "xdai":
            print(f"{token.upper()}: $1.00 USD (pegged)")
        else:
            print(f"{token.upper()}: ${prices['usd']:.8f} USD")
            
    print("\nUSDC Prices:")
    print("-" * 40)
    for token, prices in results.items():
        if token == "xdai":
            print(f"{token.upper()}: 1.00 USDC (pegged)")
        else:
            print(f"{token.upper()}: {prices['usdc']:.8f} USDC")

def print_unit_costs(json_output=False, gas_units=1.0):
    """Print gas costs in USD for all networks."""
    results = calculate_gas_costs_usd(gas_units)
    
    if json_output:
        print(json.dumps(results, indent=2))
        return
        
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"\nGas Costs in USD ({timestamp}):")
    print(f"For {gas_units}M gas units")
    print("-" * 50)
    
    if "error" in results:
        print(f"Error: {results['error']}")
        return
        
    for network, data in results.items():
        if "error" in data:
            print(f"{network}: Error - {data['error']}")
            continue
            
        print(f"\n{network}:")
        print(f"  Gas Price: {data['gas_price_gwei']:.2f} gwei")
        print(f"  Native Token Cost: {data['native_token_cost']:.8f}")
        print(f"  Token Price: ${data['token_price_usd']:.8f} USD")
        print(f"  Total Cost: ${data['usd_cost']:.8f} USD")

def main():
    parser = argparse.ArgumentParser(description="EVM Network Gas Price Monitor")
    subparsers = parser.add_subparsers(dest="command", help="Command to run")
    
    # Add --json flag to all commands
    parser.add_argument("--json", action="store_true", help="Output in JSON format")
    
    # Add --gas-units flag to gas and unit commands
    gas_units_help = "Number of million gas units to calculate for (default: 1.0, can use decimals like 0.001)"
    
    # Gas prices command
    gas_parser = subparsers.add_parser("gas", help="Show gas prices for all networks")
    gas_parser.add_argument("--gas-units", type=float, default=1.0, help=gas_units_help)
    
    # Crypto prices command
    crypto_parser = subparsers.add_parser("crypto", help="Show cryptocurrency prices")
    
    # Unit costs command
    unit_parser = subparsers.add_parser("unit", help="Show gas costs in USD")
    unit_parser.add_argument("--gas-units", type=float, default=1.0, help=gas_units_help)
    
    args = parser.parse_args()
    
    if args.command == "gas":
        print_gas_prices(args.json, args.gas_units)
    elif args.command == "crypto":
        print_crypto_prices(args.json)
    elif args.command == "unit":
        print_unit_costs(args.json, args.gas_units)
    else:
        parser.print_help()

if __name__ == "__main__":
    main() 