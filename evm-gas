#!/usr/bin/env python3

import argparse
import json
from evm_utils import get_gas_prices, get_crypto_prices, calculate_gas_costs_usd

def print_gas_prices(gas_units: float = 1.0, json_output: bool = False):
    """Print gas prices for all networks."""
    results = get_gas_prices(gas_units)
    
    if json_output:
        print(json.dumps(results, indent=2))
        return
        
    print(f"\nGas Prices (for {gas_units}M gas units):")
    print("-" * 80)
    for network, data in results.items():
        if "error" in data:
            print(f"{network}: Error - {data['error']}")
            continue
            
        print(f"{network}:")
        print(f"  Gas Price: {data['gas_price_gwei']:.2f} gwei")
        print(f"  Total Cost: {data['native_token_cost']:.8f} ETH")
        print(f"  Block Number: {data['block_number']}")
        print(f"  RPC URL: {data['rpc_url']}")
        print(f"  Timestamp: {data['timestamp']}")
        print(f"  As of: {data['datetime']}")
        print()

def print_crypto_prices(json_output: bool = False):
    """Print cryptocurrency prices."""
    results = get_crypto_prices()
    
    if json_output:
        print(json.dumps(results, indent=2))
        return
        
    print("\nCryptocurrency Prices:")
    print("-" * 80)
    if "error" in results:
        print(f"Error: {results['error']}")
        return
        
    for token, prices in results.items():
        if token in ["timestamp", "datetime"]:
            continue
        print(f"{token.upper()}:")
        print(f"  USD: ${prices['usd']:.2f}")
    print(f"\nTimestamp: {results['timestamp']}")
    print(f"As of: {results['datetime']}")

def print_gas_costs_usd(gas_units: float = 1.0, json_output: bool = False):
    """Print gas costs in USD for all networks."""
    results = calculate_gas_costs_usd(gas_units)
    
    if json_output:
        print(json.dumps(results, indent=2))
        return
        
    print(f"\nGas Costs in USD (for {gas_units}M gas units):")
    print("-" * 80)
    for network, data in results.items():
        if "error" in data:
            print(f"{network}: Error - {data['error']}")
            continue
            
        print(f"{network}:")
        print(f"  Gas Price: {data['gas_price_gwei']:.2f} gwei")
        print(f"  Native Token Cost: {data['native_token_cost']:.8f}")
        print(f"  USD Cost: ${data['usd_cost']:.2f}")
        print(f"  Token Price: ${data['token_price_usd']:.2f}")
        print(f"  Block Number: {data['block_number']}")
        print(f"  RPC URL: {data['rpc_url']}")
        print(f"  Timestamp: {data['timestamp']}")
        print(f"  As of: {data['datetime']}")
        print()

def main():
    parser = argparse.ArgumentParser(description="EVM Network Gas Price Monitor")
    subparsers = parser.add_subparsers(dest="command", help="Command to run")
    
    # Gas prices command
    gas_parser = subparsers.add_parser("gas", help="Show gas prices")
    gas_parser.add_argument("--units", type=float, default=1.0,
                          help="Number of million gas units to calculate for (default: 1.0)")
    gas_parser.add_argument("--json", action="store_true",
                          help="Output in JSON format")
    
    # Crypto prices command
    crypto_parser = subparsers.add_parser("crypto", help="Show cryptocurrency prices")
    crypto_parser.add_argument("--json", action="store_true",
                             help="Output in JSON format")
    
    # Unit cost command
    unit_parser = subparsers.add_parser("unit", help="Show gas costs in USD")
    unit_parser.add_argument("--units", type=float, default=1.0,
                           help="Number of million gas units to calculate for (default: 1.0)")
    unit_parser.add_argument("--json", action="store_true",
                           help="Output in JSON format")
    
    args = parser.parse_args()
    
    if args.command == "gas":
        print_gas_prices(args.units, args.json)
    elif args.command == "crypto":
        print_crypto_prices(args.json)
    elif args.command == "unit":
        print_gas_costs_usd(args.units, args.json)
    else:
        parser.print_help()

if __name__ == "__main__":
    main() 